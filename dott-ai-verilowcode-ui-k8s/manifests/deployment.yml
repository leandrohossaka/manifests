apiVersion: v1
kind: ConfigMap
metadata:
  name: verilowcode-ui-scripts
data:
  setup.sh: |-
    #!/bin/sh

    echo "NEXTAUTH_URL='http://$HOST_IP:$(curl --silent --fail \
      --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$NAMESPACE/services/verilowcode-ui \
      | jq '.spec.ports[].nodePort')'" | tee /tmp/data/.env.production

    echo "NEXT_PUBLIC_BASEURL_API_EXECUTION='http://$HOST_IP:$(curl --silent --fail \
      --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$NAMESPACE/services/blocks-execution-service \
      | jq '.spec.ports[].nodePort')'" | tee -a /tmp/data/.env.production

    echo "NEXT_PUBLIC_BASEURL_API_SCENERY='http://$HOST_IP:$(curl --silent --fail \
      --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$NAMESPACE/services/blocks-scenery-service \
      | jq '.spec.ports[].nodePort')'" | tee -a /tmp/data/.env.production

    echo "NEXT_PUBLIC_BASEURL_API_AUTHENTICATION='http://$HOST_IP:$(curl --silent --fail \
      --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$NAMESPACE/services/blocks-user-service \
      | jq '.spec.ports[].nodePort')'" | tee -a /tmp/data/.env.production

    echo "NEXT_PUBLIC_BASEURL_API_USER='http://$HOST_IP:$(curl --silent --fail \
      --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$NAMESPACE/services/blocks-user-service \
      | jq '.spec.ports[].nodePort')'" | tee -a /tmp/data/.env.production

    echo "NEXT_PUBLIC_BASEURL_API_UPLOAD='http://$HOST_IP:$(curl --silent --fail \
      --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/$NAMESPACE/services/blocks-files-service \
      | jq '.spec.ports[].nodePort')'" | tee -a /tmp/data/.env.production

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: verilowcode-ui
  labels:
    app.kubernetes.io/name: verilowcode-ui
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: verilowcode-ui
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: verilowcode-ui
    spec:
      serviceAccountName: verilowcode-ui
      initContainers:
      - name: dep-blocks-execution-service-readiness
        image: busybox:stable
        command: ['sh', '-c', 
          'echo -e "Checking for the availability of blocks-execution-service deployment"; 
          while ! nc -z blocks-execution-service 8081; 
          do sleep 1; printf "-"; 
          done; 
          echo -e "  >>blocks-execution-service has started";']
      - name: dep-blocks-scenery-service-readiness
        image: busybox:stable
        command: ['sh', '-c', 
          'echo -e "Checking for the availability of blocks-scenery-service deployment"; 
          while ! nc -z blocks-scenery-service 8082; 
          do sleep 1; printf "-"; 
          done; 
          echo -e "  >>blocks-scenery-service has started";']
      - name: dep-blocks-user-service-readiness
        image: busybox:stable
        command: ['sh', '-c', 
          'echo -e "Checking for the availability of blocks-user-service deployment"; 
          while ! nc -z blocks-user-service 8080; 
          do sleep 1; printf "-"; 
          done; 
          echo -e "  >>blocks-user-service has started";']
      - name: dep-blocks-files-service-readiness
        image: busybox:stable
        command: ['sh', '-c', 
          'echo -e "Checking for the availability of blocks-files-service deployment"; 
          while ! nc -z blocks-files-service 8085; 
          do sleep 1; printf "-"; 
          done; 
          echo -e "  >>blocks-files-service has started";']
      - name: app-data-temp
        image: registry.vericode.com.br/sinacor.k8s.ui:1.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - cp -r /usr/src/app /tmp/data
        volumeMounts:
        - name: app-data
          mountPath: /tmp/data
      - name: setup-env
        image: badouralix/curl-jq:alpine
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - /setup.sh
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        volumeMounts:
        - name: scripts
          mountPath: /setup.sh
          subPath: setup.sh
        - name: app-data
          mountPath: /tmp/data
          subPath: app
      containers:
      - name: verilowcode-ui
        image: registry.vericode.com.br/sinacor.k8s.ui:1.0.3
        env:
          - name: "REACT_APP_ENVIRONMENT"
            value: "PROD"
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: app-data
          mountPath: /usr/src/app
          subPath: app
      volumes:
      - name: scripts
        configMap:
          name: verilowcode-ui-scripts
          defaultMode: 0755
      - name: app-data
        emptyDir: {}
      dnsPolicy: ClusterFirst

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: verilowcode-ui
  labels:
    app.kubernetes.io/name: verilowcode-ui
    app.kubernetes.io/instance: verilowcode-ui
    app.kubernetes.io/component: verilowcode-ui
rules:
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: verilowcode-ui
  labels:
    app.kubernetes.io/name: verilowcode-ui
    app.kubernetes.io/instance: verilowcode-ui
    app.kubernetes.io/component: verilowcode-ui
roleRef:
  kind: Role
  name: verilowcode-ui
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: verilowcode-ui

---

apiVersion: v1
kind: Service
metadata:
  name: verilowcode-ui
spec:
  type: NodePort
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  selector:
    app.kubernetes.io/name: verilowcode-ui

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: verilowcode-ui
  labels:
    app.kubernetes.io/name: verilowcode-ui
    app.kubernetes.io/instance: verilowcode-ui
    app.kubernetes.io/component: verilowcode-ui
  annotations:
automountServiceAccountToken: true